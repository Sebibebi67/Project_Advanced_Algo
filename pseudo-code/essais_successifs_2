

idée :
parcours de chaque point
    -> pour chaque point, faire la liste des cordes tracables

#==================================================
# Avoir toutes les solutions une fois et une seule
#==================================================

listeDesTriangulations = listeVide()
triangulationRacine = listeVide()

fonction essaiSuccessifs2(triangulationRacine, dist)
    var Liste<Liste> listeDesTriangulations
    var nombreDeSommets

    pour 0 < i < nombreDeSommets faire:
        pour 0 < j < nombreDeSommets faire:
            si validerCorde(i,j)
                nouvelleTriangulation = copier(triangulationRacine)
                dist2 = distdistanceCorde(i,j)
                nouvelleTriangulation.ajouter(i,j)
                si (nouvelleTriangulation.nombreDeCorde == nombreDeSommets-3) 
                    et (nouvelleTriangulation n'est pas dans listeDesTriangulations)
                    listeDesTriangulations.ajouter(nouvelleTriangulation)
                sinon
                    essaiSuccessifs2(nouvelleTriangulation, dist)
                finSi
            finSi
        finPour
    finPour
fin

#==================================================
# Condition d'élaguage (Avoir la meilleure solution)
#==================================================

listeDesTriangulations = listeVide()
triangulationRacine = listeVide()

fonction estPlusCourt(listeDesTriangulations, nouvelleTriangulation)
    if taille(listeDesTriangulations) == 0
        retourner Vrai
    finsi
    triangulationMinimale = minimum(listeDesTriangulations)
    si distanceTriangulation(nouvelleTriangulation) < minimum
        retourner Vrai
    finsi
    returner Faux
finfonction

fonction essaiSuccessifs2AvecElaguage(triangulationRacine, dist)
    pour 0 < i < nombreDeSommets
        pour 0 < j < nombreDeSommets
            si validerCorde(i,j)
                nouvelleTriangulation = copier(triangulationRacine)
                dist2 = dist+distanceCorde(i,j)
                nouvelleTriangulation.ajouter(i,j)
                si estPlusCourt(listeDesTriangulations, dist2)
                    si (nouvelleTriangulation.nombreDeCorde == nombreDeSommets-3) 
                        et (nouvelleTriangulation n'est pas dans listeDesTriangulations)
                        listeDesTriangulations.ajouter(nouvelleTriangulation)
                    sinon
                        essaiSuccessifs2AvecElaguage(nouvelleTriangulation, dist)
                    finsi
                finsi
            finsi
        finpour
    finpour
fin
